name: Deploy to AWS
on:
  # Trigger the workflow on push & pull request but only for the aws branch
  push:
    branches:
      - aws
  pull_request:
    branches:
      - aws

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: cd iac && terraform fmt -check

      - name: Terraform Init
        id: init
        run: cd iac && terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: cd iac && terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/aws' && github.event_name == 'push'
        run: terraform apply -auto-approve

  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      # Clone the repo
      - name: Clone repository
        uses: actions/checkout@v1
      # Cache node modules
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: yarn-deps-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-deps-${{ hashFiles('yarn.lock') }}
      # Build the static site
      - name: Create static build
        run: yarn install && yarn build
      # Upload the artifact for other stages to use
      - name: Share artifact in github workflow
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: build
    steps:
      # Download the build artifact
      - name: Get build artifact
        uses: actions/download-artifact@v1
        with:
          name: build
      # Setup the AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
      # Copy the files from /build to s3 bucket
      - name: Deploy static site to S3 bucket
        run: aws s3 sync . s3://${{ secrets.S3_BUCKET_NAME }} --delete
        working-directory: build
      # Invalidate index file in Cloudfront (this forces edges to fetch the latest index.html)
      - name: invalidate
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: '/index.html'
          AWS_REGION: us-west-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
